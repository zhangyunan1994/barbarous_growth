类加载器
1,什么是类加载器
	* 把.class文件家族到jvm的方法区中,变成一个Class对象
2,得到类加载器
	* Class.getCLassLoader();
3,类加载器的分类
他们都是'片警'
	①引导类加载器
		类库:rt.jar(其实也就负责加载自己人,JAVA的核心类库)
	②扩展类加载器
		ext文件夹:这个下面的扩展类库
	③系统类加载器
		加载应用下的class,就是我们写的一些类的,以及这些类所依赖的第三方jar包
		其实它加载的就是:classpath路径下的类


系统类加载器上层领导 -- 扩展类加载器领导是BOSS --- 引导类加载器

====类加载器的委托机制
   * 代码中出现了这个代码:new A();
   > 系统发现了自己加载的类,其中包含了 new A();这个说明需要系统去加载A类
   > 系统会给自己的领到电话,让扩展去自己的地盘加载A类
   > 扩展又给自己的领到打电话,让引导去自己的地盘加载A类
   > 引导就自己真的去rt.jar中寻找A!
	* 如果找到了,那么就加载,然后会返回A对应的Class对象给扩展,那么扩展也会把Class对象返回给系统
	* 如果就没找到,引导就给扩展返回null,扩展又去自己的地盘寻找A 
		* 如果找到了,加载,还给系统,
		* 如果没找到就返回null给系统
			* 系统就自己找了,如果找到了就加载到内存
			* 如果没找到,抛出异常,报错
类的解析过程
class MyApp//被系统加载
{
	main()
	{
		A a = new A();//也由系统加载
		String a = new String();//也被系统加载
	}
}
class String//引导加载
{
	private Integer i;//直接引导加载
}

每个线程都有一个自己的类加载器