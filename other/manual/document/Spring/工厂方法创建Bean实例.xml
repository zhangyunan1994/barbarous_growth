――――――――――――――――――――
一,实例工厂方法	    |
――――――――――――――――――――
	> 把对象的创建过程,封装到另一个对象实例的方法里!当客户端请求对象时,只需要简单的调用该实例方法,而不需要关心对象创建的细节
	> 要声明通过实例工厂方法创建的Bean
	> 得先创建工厂本身,再调用方法获取实例
	* 在<bean>的factroy属性里面指定拥有该工厂方法的Bean
	* 在factory-method属性里面指定该工厂方法的名称
	* 使用construtor-agr元素为工厂方法传递参数
	<bean id="factory" class=""/>	<!-- 工厂类配置 -->
	<bean id="" factory-bean="factory" factory-method="getCar">	<!-- 实例类配置 -->
		<constructor-arg value="奥迪"/>
	</bean>
	* 工厂类的配置
		> id,class,就不多说了.这是一个实例工厂的配置方式
	* 实例类配置
		> factory-bean:表示,这个实例由哪个工厂来创建?很显然,这个就是某个工厂bean的id值
		> factory-method:指定的工厂类中,哪个方法是获取实例的方法?
		> constructor-arg:调用工厂类的方法创建这个Bean实例的时候,给人家方法传递点啥参数?
		
――――――――――――――――――――
二,静态工厂方法	    |
――――――――――――――――――――
	> 直接调用某一个类的静态方法,就能返回Bean实例,不用创建工厂本身的实例
	> 不多说了,直接看代码吧.尚硅谷的简直就是在瞎JB讲
	<bean id="" class="" factory-method="">
		<constructor-arg value=""/>
	</bean>
	* 这个东西就是一个静态的工厂,能够产生bean实例(具体细节代码,自行脑补)
	* factory-method:表示:该工厂里面,哪个方法是获取实例的?就把这个方法名称填在这里
	* constructor-arg的value属性,表示:调用工厂类的获取bean实例的方法,需要传递的参数,就往这里传
	* 这个东西通过IOC容器一个实例创建,也就根据value的值,调用factory-method方法,返回了一个'实例'!至于这个实例是啥?要根据你工厂的逻辑代码来确定

――――――――――――――――――――
三,总结			    |
――――――――――――――――――――
	> 讲真,这个东西我也不知道是干嘛的！非要这样创建不累啊？不过有些东西是值得去发现的
	1,被创建的实例,并没有在xml文件中配置<bean class="..."/>,也就是说,通过工厂创建出来的实例,都是我们自己工厂造出来的,跟IOC没关系!
	IOC的作用是帮我创建工厂
	2,factory-method 这个属性很重要