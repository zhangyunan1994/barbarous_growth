-------------------------------
RabbitMQ-入门					|
-------------------------------
	# 消息中间件(MQ-Message Queue),消息队列是应用程序和应用程序之间的通信方法
	# RabbitMQ是一个开源的,在AMQP基础上完整的,可复用的企业消息系统
	# 支持主流的操作系统:Mac,Windos,Linux
	# 支持多种语言:Java,Python,Ruby...
	# 本身使用Rrlang语言开发
	# 非Apache的产品
	# 类似产品
		ActiveMQ
		Kafka(分布式)
	# 下载地址
		http://www.rabbitmq.com/download.html
	
	# 默认端口信息
		amqp		:5672			//MQ协议
		web			:15672			//WEB管理端口
		dustering	:25672			//集群端口
	
	
	
-------------------------------
RabbitMQ-队列模式				|
-------------------------------
	1,HelloWord
	2,Work Queues
	3,Publish/Subscribe
	4,Routing
	5,Topics
	6,RPC
		* 这种模式不学,RPC严格来说.并非是MQ,也不是它的专长
	
	# 普通,work,订阅,路由,通配符
	
	# 严格来说RabbitMQ只有三种模式
		1,(直连模式)点对点.最简单.生产者把消息发给队列,消费从队里消费消息.'一条消息,最终只能被一个消费者消费'

		2,(work模式)点对多.生产者把消息发给队列.N个消费者从队列里面消费消息.'一条消息,最终只能被一个消费者消费'
			* 情况又可以分为两种
			1,雨露匀沾,消息你一条我一条.不乱
			2,能者多劳,谁消费快,谁就消费多

		3,(订阅模式)点对多.生产者把消息发送给'交换机',N个消费者自己创建队里来绑定交换机.'一条消息,可以被N个消费者消费'
			* 如果生产者把消息发送给了未绑定队列的交换机,那么该消息将会丢失
		
	# 剩下的两种,纯粹就是交换机的不同而已
		4,(路由模式)点对多,生产者产生消息.并且给消息绑定一个'路由key',推送到交换机.消费者自己创建N个队列,绑定'路由key',绑定到交换机.交换机收到消息后.就会根据'路由key',把消息推送到相同的队里
		5,(通配模式)点对多,跟上面其实一样,区别在于'上面是key必须一样,就推送消息,而这个,只要是符合匹配规则就OK'
			* 通配符有两种
				1,#
					一个或者多个词儿
				2,*
					只能是一个词儿
		
		6,RPC...说过了,不讲.用Dubbo代替


	
	# 三种交换机
		1,(订阅模式)点对多,说白了.消息到路由.哪个消费者把队里绑定到了路由都可以收到
		2,(路由模式)点对多,消息是绑定了一个key,消费者把队列绑定路由也要绑定key,这样就保证了不同的消息,到不同的路由去
		3,(通配模式)点对多,跟上面一样,不同的是,这个可以通过匹配符号,来匹配到消息

	
	# '完成交换机和队列的绑定,有两种方式'
		1,在程序(或者spring配置)中完成
		2,在后台管理中完成
		* 实际的开发中都是通过后台管理,人工的进行分配.这样耦合度最低


-------------------------------
RabbitMQ-持久化和非持久化		|
-------------------------------
	# 在WEB管理界面
		Queues 中 All Queues 表中,某些队列的:Features 属性为空.有些为 D
	
	# 有D,代表是持久化队里,反之则是非持久化队列

	# 服务器重启之后
		持久化的队列,会被序列到硬盘.不会丢失
		非持久化的,会丢失(但是它的优势是速度更快)
	
