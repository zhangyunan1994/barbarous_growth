-------------------------------
Linux-软件包管理简介			|
-------------------------------
	# 软件包分类
		1,源码包(未经过编译的C,C++源代码)
			* 脚本安装包(并不多见,有点像Windows中的图形界面的安装包)
			* 软件是编译安装,所以更加适合系统.效率更高
			* 卸载很方便.....直接删目录就好了(Windows吃过亏的还少吗?什么JB注册表遗留,什么JB垃圾文件... ...)
			
			* 安装过程步骤比较多,尤其暗转较大的软件集合时.容易出错
			* 编译时间比较长,安装比二进制

		2,二进制包(RPM包,是经过编译过的包,系统默认包)
			* 包管理系统简单,只通过几个命令,就可以实现包的安装升级,查询,和卸载
			* 安装速度快
			
			* 看不到源代码
			

-------------------------------
Linux-RPM包管理	-rpm			|
-------------------------------
	# 操作已经安装好的软件(卸载)的时候,使用的是软件名
		* 搜索路径是: /var/lib/rpm

	# rpm包命名规则
		httpd-2.2.15-15.el6.centos.1.i686.rpm
		* httpd			//软件包名
		* 2.2.15		//软件版本
		* 15			//软件发布次数
		* el6.centis	//适合的Linux平台
		* i686			//适合的硬件平台
		* rpm			//rpm的扩展名

	# 安装
		rpm -ivh [包全名]
			-i				//执行安装 
			-v				//显示详细信息
			-h				//显示进度
			--nodeps		//不检测依赖性
	
	# 升级
		rpm -Uvh	[包全名]
			-U			//升级
	
	# 卸载
		rpm -e [包名]
			-e			//卸载
			--nodeps	//不检测依赖	

	# 查询
		* 这个是目前rpm命令存在的意义了-查询
		rpm -q [包名]		//查询指定软件是否安装
		rpm -qa				//查询所有已经安装的rpm包
		rpm -i [包名]		//查询软件信息
		rpm -p [包全名]		//查询未安装的包信息
		rpm -ql	[包名]		//查询包中文件的安装位置
		rpm -qR	[包名]		//查询未安装的软件包的依赖信息
		.. ...用的时候,自己去查.MD的一大堆
	
	# RPM安装的位置
		/etc/init.d
			* (独立服务)启动脚本位置
			* 这个目录其实是:/etc/rc.d/init.d 目录的链接目录
		/etc/sysconfig
			* 初始化环境配置文件地址
		/etc
			* 配置文件地址
		/etc/xinetd.conf
			* xinetd配置文件
		/etc/xinetd.d
			* 基于xinetd服务的启动脚本
		/var/lib
			* 服务产生的数据放在这里
		/var/log
			* 日志
		# 以上只是常规的目录,也有一些RPM软件会把一些东西放在其他的地方

-------------------------------
Linux-RPM包管理	-yum			|
-------------------------------
	# yum源配置文件
		/etc/yum.repos.d/CentOs-Base.repo
		[base]				//容器名称,一定要放在[]中
		name				//容器说明,这个随意
		mirrorlist			//镜像站点,这个可以注释掉
		baseurl				//yum源服务器的地址,默认的CentOS官方,源服务器.可以改成自己的
		enabled				//此容器是否生效,如果不写,或者enable=1.都是生效状态,唯独:enable=0,为禁止状态
		gpgcheck			//RPM证书是否生效,值为0则是不生效
		gpgkey				//数据整数的公钥文件保存位置,一般不用修改
	
	# 查询
		* 获取服务器上,可用的软件包列表
		yum -list				//查询所有可用的软件包列表
		yum search [关键字]		//搜索服务器上所有和关键字相关的包
		
	# 安装
		yum -y install [包名]	// 进行程序安装
			* -y	//自动yes
	
	# 升级
		yum -y -update [包名]	//进行程序的升级
			* -y	//自动yes
			* 注意了,如果不加包名.会连Linux的内核一起升级.灰常可怕
	# 卸载
		yum -y remove [包名]
			* -y	//自动yes
			* 注意了,如果不加包名,后果很严重
			* 会连同依赖一起卸载
	
	# 查询所有可用的软件组列表
		yum grouplist
	# 安装指定软件组
		yum groupinstall [软件组名]
	# 卸载指定软件组
		yum groupremove [软件组名]
	

--------------------------------
Linux-源码包管理				|
--------------------------------
	# RPM默认的安装路径
		/etc/				//配置文件安装目录
		/usr/bin/			//可执行的命令安装目录
		/usr/lib/			//程序所使用的函数库保存位置
		/usr/share/doc/		//基本的软件使用手册保存位置
		/usr/share/man/		//帮助文件保存位置
	
	# 源码包安装,是指定位置.
		/usr/local/软件名/	//建议在这个目录下
	
	# rpm包安装的服务可以使用系统服务管理命令(service)来进行管理
		/etc/rc.d/init.d/[软件名] start
		service [软件名] start

	# 源码安装的服务,不能使用service来进行操作,只能使用绝对路径去操作
		/home/KevinBlandy/Tomcat/bin/startup.sh
	
	# 让某些服务在后台运行
		* 没错,在运行脚本的后面添加一个  & 符号 执行
		/usr/local/redis/redis-server &

-------------------------------
Linux-源码安装的方式			|
-------------------------------
	# 安装准备
		1,安装C语言编译器:gcc

	# 源码包的保存位置
		/usr/local/src			//系统给我们准备的目录
	
	# 软件安装位置
		/usr.local				//也是系统给我们准备的目录
	
	# 安装过程
		1,下载源码包
		2,解压缩下载的源码包
		3,进入压缩目录
			* 软件的配置与检查
				> ./configure		
					* ./configure --profix=/usr/local/安装目录			//指定软件的安装目录
				> 定义需要的功能
				> 检测喜欢环境是否符合要求
				> 把定义好的功能和选项都写入Makefile文件,用于后续编辑
		4,执行编译(仅仅是编译,不会执行安装)
			make
		5,清空因为编译产生的临时文件
			make clean
		5,执行编译,且安装
			make install
	
	# 源码包安装的软件卸载
		* 直接删除掉安装目录就好了
	
-------------------------------
Linux-脚本安装包与软件包的选择|
-------------------------------