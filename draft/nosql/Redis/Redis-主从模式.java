-----------------------
Redis-主从模式			|
-----------------------
	* 为了降低redis服务器的负载,可以多设置几个服务器,做主从模式
	* 一个主服务器负责"写",其他从服务器负责"读"
	* 主从模式会自动同步数据
	* 配置文件
		slaveof 192.168.1.1 6379
			* 该配置就是设置为奴隶服务器,可以把指定ip的数据同步过来.但是只能读取不能写入
		slave-read-only yes
			* 是否只读,一般从服务器,有N个,都是仅仅提供读取操作,所以这个建议就是yes
			* 默认从库为只读,不建议修改
	
	* 也可以使用命令的机制,不过仅仅在当前连接下有效
		slaveof ip 端口
	
	* master宕机后,slave会自动升级为master,这个过程会比较慢,需要通过其他方式解决
	* slave断开后,再连接上master,会自动清空slave中的所有数据,然后再把master中的数据全部同步过来

-----------------------
Redis-主从复制			|
-----------------------
	# 其实就是读写分离
		* 读:在从库
		* 写:在主库
	# 数据是从 主库 --> 同步 --> 从库
	# 这种模式.1,可以避免redis单点故障.构建读写分离的架构,满足读多写少的应用场景

	# 两种方式配置主从
		1,在redis.conf文件设置slaveof
			slaveof masterip masterport
			
		
		2,通过客户端命令完成
			slaveof masterip masterport
			* 注意,这种方式仅仅对当前连接生效


	# 主从状态查询
		info replication
		* 可以查看出当前服务服务器在主从中的身份
		
	
	# 默认情况下.Redis从库,只能读.不能写

	# 从库也可以作为其他库的主库
		* 像链式调用一样:主 -> 从 - > 从
		* 可以减轻主服务器的压力
	
	# 主库某种意义上说,可以关掉数据持久化操作
		* 持久化全部交给从库去完成.这样可以提高主库的性能
	
	# 复制的过程
		1,当从库和主库建立MS关系后,会向主库发送SYNC命令
		2,主库接收到SYNC命令后会开始在后台保存快照(RDB持久化过程),并将期间接收到的写命令,缓存起来
		3,当快照完成后,主Redis,会把快照文件和所有缓存的写命令发送给从Redis
		4,从Redis接收到后,会载入磁盘快照文件并且执行收到的缓存命令
		5,之后,主Redis每当接收到写命令时,就会把命令发送给从Redis,从而保证数据的一致性
	
	# 无磁盘复制
		* 前面已经说了,主服务器收到SYNC命令后,会执行RDB,就是是配置文件进制了.也还是会执行
		* 如果说,主服务器IO差的话,这就是一个性能瓶颈,在 Redis2.8的时候,已经开始实现了无盘复制,直接通过网络把数据传递给从服务器,不需要先序列化
		* 开启无磁盘复制
			repl-diskless-sync yes
		* 这种方式吧,现在还未推广使用.只是确定了有这种功能
	
	# 主从结构中的宕机情况
		1,从Redis宕机
			* 这个相对而言比较简单,在Redis中从库重新启动后会自动加入主从架构中,自动完成数据的同步
			* 主从断开期间,主库的变化不大.主从再次启动后,主库不会执行'RDB'操作,则2.8以后的版本.主从断线后恢复的情况下.实现的是增量复制
			* 说白了.从库挂了,又恢复了.主库就会给它,它不在线的这段时间内写入的数据.而不是给全部
		
		2,主Redis宕机
			* 这个比较麻烦一点,需要执行两步操作
			* 一,在从库中执行:slaveof no one,断开主从关系,并且提升自己为主服务器
			* 二,把主库从新启动后(恢复),执行:slaveof 并且把其他库设为从库.这时候数据就可以恢复回来
			* 这个手动完成恢复的过程比较麻烦,且容易出错.Redis所以弄了个'哨兵(sentinel)'的解决策略
			
			* 增量同步的原理
				从库在从主库同步数据的时候,主库会记录一个偏移量(同步点)

	
	# 哨兵(sentinel)
		* 就是为了解决注册宕机的问题
		* 顾名思义,哨兵的作用其实就是对Redis的系统的运行情况进行监控.它是一个独立的进程,功能有两个
			1,监控主数据库和从数据库是否运行正常
			2,主数据库出现故障后,将自动把从数据库转化为主数据库
		
		* 原理

		* 配置哨兵
			1,启动哨兵需要创建哨兵配置文件- sentinel.cong
			2,输入内容:sentinel monitor name ip port number
				name:监控的主数据库的名称,随便自定义
				ip:主数据库所在的IP
				port:主数据库所在的端口
				number:最低通过票数
			
			3,启动哨兵进程
				redis-sentinel ./sentinel.cong
				* 加载指定的配置文件
			

			
			
		

		

		