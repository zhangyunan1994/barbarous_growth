------------------------
MYSQL-连接查询			|
------------------------
	# 连接查询:把多张表进行记录的连接(按照某个条件进行数据的拼接)
	# 分类
		1,内链接
		2,外连接
			# 左外
			# 右外
		3,自然连接
		4,交叉连接
------------------------
MYSQL-内链接			|
------------------------
	# inner join (inner关键字可以省略)
	# 从左表中取出每一条记录,与右表中的所有记录进行匹配
	# 匹配必须是某个条件,在左表和右表中相同,才会保留结果.否则,不保留
	# 基本语法
		SELECT * FROM [左表] innder join [右表] on [左表].[字段]=[右表].[字段];
	# 内连接,可以没有on,那么系统会保留所有的结果,没错.又是传说中的笛卡尔积
	# '还可以使用where代替on,但是效率没有on高'

------------------------
MYSQL-外连接			|
------------------------
	# outer join(并没有outer这个关键字)
	# 以某张表为主,取出里面的所有记录.每条与另外一张表.不管能不能匹配上条件.最终都会保留.如果不能匹配,那么其他表的字段都置空
	1,左外
		# left join
		# 基本语法
			SELECT
				...
			FROM
				[左表]
			LEFT JOIN
				[右表]
			ON
				[条件]
		# 会把左边所有的数据都显示出来,如果右表没有匹配的数据.以null显示

	2,右外
		# right join
		# 基本语法
			SELECT
				...
			FROM
				[左表]
			RIGHT JOIN
				[右表]
			ON
				[条件]
		# 会把右表所有的数据都显示出来,如果左表没有匹配的数据.以null显示

------------------------
MYSQL-自然连接			|
------------------------
	# natural join
	# MYSQL方言,其他数据库不一定有
	# '自动的匹配连接条件',但是.不怎么建议使用.是以'字段名称作为匹配模式'
	# 基本语法
		SELECT ...FROM [表1] natural join [表2];		//内连接
			* 自动使用同名字段作为连接条件,结果中会合并该字段
		SELECT ...FROM [表1] left natural join [表2];	//左外自然连接
		SELECT ...FROM [表1] right natural join [表2];	//右外自然连接

------------------------
MYSQL-交叉连接			|
------------------------
	# cross join
	# 从一张表中循环取出每一条记录,每条记录都去另外一张表进行匹配.而且匹配一定保留(没有条件匹配)
	# 而连接本身字段就会增加(保留)	--	笛卡尔积(笛卡尔是没有意义的,尽量要避免)
	# 存在的价值:保证连接这种结构的完整性而已.
	# 基本语法
		SELECT * from [左表] cross join [右表];	== select * from [左表],[右表];
		select * from emp cross join dept;

		# 也可以加上条件
		select * 
			from emp e 
		cross join 
			dept d 
		on e.deptno=d.deptno ;

------------------------
MYSQL-全外				|
------------------------

	# 全外(MYSQL不支持,但是我们可以通过其他方式实现)
	# 这个就是,左右两表都是相同的,两个表的所有内容都必须全部出来,如果没有对应记录的,就用null填充

	select * from 表1 left outer join 表2 on 表1.字段=表2.字段
		union 
	select * from 表1 right outer join 表2 on 表1.字段=表2.字段;
	-懂了没？联合查询 ,把他们的结果集合并一下就出来了